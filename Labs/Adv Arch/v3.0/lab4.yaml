AWSTemplateFormatVersion: '2010-09-09'
Description: Setting up a Data Lake with AWS Lake Formation.
# Parameters used in these asset creation
Parameters:
  UserId:
    Default: awsstudent
    Type: String
  TestUserId:
    Default: testuser
    Type: String
  AdministratorPassword:
    Type: String
    Default: P@22w0rd!
    NoEcho: True
  InstanceType:
    Description: Amazon EC2 instance type
    Type: String
    Default: t2.small
    AllowedValues:
      - t2.micro
      - t2.small
    ConstraintDescription: must be a valid EC2 instance type.
  VPCCIDR:
    Description: 'CIDR Block for VPC'
    Type: String
    Default: 10.0.0.0/16
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(3[0-2]|[1-2][0-9]|[0-9]))$'
  PubSubA:
    Description: 'Public Subnet A'
    Type: String
    Default: 10.0.1.0/24
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(3[0-2]|[1-2][0-9]|[0-9]))$'
  PubSubB:
    Description: 'Public Subnet B'
    Type: String
    Default: 10.0.2.0/24
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(3[0-2]|[1-2][0-9]|[0-9]))$'

Conditions:
  createSubnetB: !Equals [ !FindInMap [RegionMap, !Ref "AWS::Region", SubnetB], True ]

Resources:
  labVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: True
      EnableDnsHostnames: True

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    DependsOn: labVPC
    Properties:
      Tags:
      - Key: Name
        Value: 'labVPC-IGW'

  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref labVPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref labVPC
      CidrBlock: !Ref PubSubA
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
      - Key: Name
        Value: !Join
                - '_'
                - - 'Public'
                  - !Select [0, !GetAZs '']
                  - !Ref PubSubA
      - Key: Reach
        Value: Public

  PublicSubnetB:
    Type: 'AWS::EC2::Subnet'
    Condition: createSubnetB
    Properties:
      VpcId: !Ref labVPC
      CidrBlock: !Ref PubSubB
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
      - Key: Name
        Value: !Join
                - '_'
                - - 'Public'
                  - !Select [1, !GetAZs '']
                  - !Ref PubSubB
      - Key: Reach
        Value: Public

  PublicRouteTableA:
    Type: 'AWS::EC2::RouteTable'
    DependsOn:
      - AttachGateway
    Properties:
      VpcId: !Ref labVPC
      Tags:
      - Key: Name
        Value: !Join
                - '_'
                - - 'labVPC-Public'
                  - !Sub ${VPCCIDR}

  # And add in the default route to 0.0.0.0/0
  PublicRouteIGW:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PublicRouteTableA
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Attach the routing table to each of the subnets
  PublicRouteTableAssociationA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTableA

  PublicRouteTableAssociationB:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: createSubnetB
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTableA

  Cloud9:
    Type: AWS::Cloud9::EnvironmentEC2
    Properties: 
      # With EventEngine you use Federated login to get console access, so the owner must be the correct federated role
      OwnerArn: !Sub "arn:aws:iam::${AWS::AccountId}:user/${UserId}"
      AutomaticStopTimeMinutes: 720
      Description: Cloud9 development environment
      InstanceType: !Ref InstanceType
      SubnetId: !Ref PublicSubnetA

  DataBucket:
    Type: AWS::S3::Bucket

  ReadOnlyGroup:
    Type: AWS::IAM::Group
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/ReadOnlyAccess
  
  GroupAssignment:
    Type: AWS::IAM::UserToGroupAddition
    Properties:
      GroupName: !Ref ReadOnlyGroup
      Users:
        - !Ref UserId
  
  AdminGlueServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - glue.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
      Path: /
      Policies:
        - PolicyName: "dataLakePol"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource: '*'
  UserGlueServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - glue.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
      Path: /
      Policies:
        - PolicyName: "userRole"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource: '*'

  LakeFormationServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lakeformation.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: "LakeFormationPol"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                Resource: 
                  - !Sub 'arn:aws:s3:::${DataBucket}/review/*'
              - Effect: Allow
                Action:
                  -  s3:ListBucket
                Resource:
                  - !Sub 'arn:aws:s3:::${DataBucket}'
#### Test Users#####

  TestUser:
    Type: AWS::IAM::User
    Properties:
      LoginProfile:
        Password: !Ref AdministratorPassword
      UserName: !Ref TestUserId
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
      Path: /
      Policies:
        - PolicyName: dataLakePol
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - athena:ListDataCatalogs
                  - lakeformation:GetDataAccess
                  - athena:ListWorkGroups
                  - glue:Get*
                  - glue:Search*
                Resource: '*'
              - Effect: Allow
                Action:
                  - athena:*
                Resource: "arn:aws:athena:*:*:workgroup/primary"
      

Outputs:
  Cloud9url:
    Description: This is the direct URL to use to access your Cloud9 instance
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/cloud9/ide/${Cloud9}
  S3Bucket:
    Description: This is the name of the S3 bucket for your account
    Value: !Ref DataBucket
  Region:
    Description: The AWS Region
    Value: !Sub ${AWS::Region}
  testuser:
    Description: The userName that will be used for testing Data Permission
    Value: !Ref TestUserId
  testuserPassword:
    Description: The User password for the testuser
    Value: !Ref AdministratorPassword

# This is a map of Regions and AZ's
Mappings:
  # This needs to be updated as Regions and AZ's are added.
  RegionMap:
    af-south-1: # Cape Town
      SubnetA: True
      SubnetB: True
    ap-east-1: # Hong Kong
      SubnetA: True
      SubnetB: True
    ap-south-1: # Mumbai
      SubnetA: True
      SubnetB: True
    ap-northeast-3: # Osaka-Local
      SubnetA: True
      SubnetB: False
    ap-northeast-2: # Seoul
      SubnetA: True
      SubnetB: True
    ap-southeast-1: # Singapore
      SubnetA: True
      SubnetB: True
    ap-southeast-2: # Sydney
      SubnetA: True
      SubnetB: True
    ap-northeast-1: # Tokyo
      SubnetA: True
      SubnetB: True
    ca-central-1: # Canada (Central)
      SubnetA: True
      SubnetB: True
    eu-central-1: # Frankfurt
      SubnetA: True
      SubnetB: True
    eu-west-1: # Ireland
      SubnetA: True
      SubnetB: True
    eu-west-2: # London
      SubnetA: True
      SubnetB: True
    eu-south-1: # Milan
      SubnetA: True
      SubnetB: True
    eu-west-3: # Paris
      SubnetA: True
      SubnetB: True
    eu-north-1: # Stockholm
      SubnetA: True
      SubnetB: True
    sa-east-1: # Sao Paulo
      SubnetA: True
      SubnetB: True
    us-east-1: # N. Virginia
      SubnetA: True
      SubnetB: True
    us-east-2: # Ohio
      SubnetA: True
      SubnetB: True
    us-west-1: # N. California
      SubnetA: True
      SubnetB: True
    us-west-2: # Oregon
      SubnetA: True
      SubnetB: True