AWSTemplateFormatVersion: 2010-09-09
Description: Lab template

# Lab VPC with 1 public subnet
# Role for EC2 instance to launch another instance
# Misconfigured web server for challenge

Parameters:

  WindowsAMIID:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-windows-latest/Windows_Server-2019-English-Full-Base

  KeyName:
    Type: String
    Description: Keyname for the keypair that Qwiklab will use to launch EC2 instances
    Default: default-lab-key

Resources:

###########
# VPC with Internet Gateway
###########

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: Lab VPC

  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Lab IGW

  VPCtoIGWConnection:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn:
      - IGW
      - VPC
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC

###########
# Public Route Table
###########

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public Route Table

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn:
      - PublicRouteTable
      - VPCtoIGWConnection
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
      RouteTableId: !Ref PublicRouteTable

###########
# Public Subnet
###########

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Select 
        - 0
        - !GetAZs 
          Ref: AWS::Region
      Tags:
        - Key: Name
          Value: Public Subnet

  PublicRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PublicRouteTable
      - PublicSubnet1
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

###########
# IAM Role for Bastion
###########

  BastionInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref BastionRole]
      InstanceProfileName: Bastion-Role
      
  BastionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: Bastion-Role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: ec2:*
                Resource: '*'
              - Effect: Allow
                Action: ssm:Get*
                Resource: '*'

###########
# Security Group for Web Server launched by student
###########

  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: WebSecurityGroup
      GroupDescription: Enable HTTP ingress
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: Web Server Security Group

###########
# Misconfigured Instance for Challenge
###########

  MisconfiguredWebServer:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.small
      ImageId: !Ref WindowsAMIID
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - !Ref MisconfiguredSecurityGroup
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: Misconfigured Web Server
      UserData:
        Fn::Base64: !Sub |
          <powershell>
          Set-ExecutionPolicy Unrestricted -Force
          New-Item -ItemType directory -Path 'C:\\temp', 'C:\\temp\\aws'
          # Install IIS and Web Management Tools.
          Import-Module ServerManager
          install-windowsfeatures web-server, web-webserver
          install-windowsfeature web-mgmt-tools
          </powershell>

  MisconfiguredSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: Challenge-SG
      GroupDescription: Enable HTTP and RDP ingress
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: HTTP and RDP Security Group

Outputs:

  Region:
    Value: !Sub ${AWS::Region}
    Description: Lab Region

  WebSecurityGroup:
    Value: !Sub ${WebServerSecurityGroup}
    Description: Web Security Group

  PublicSubnet:
    Value: !Sub ${PublicSubnet1}
    Description: Public Subnet

  MisconfiguredWebServer:
    Value: !Sub ${MisconfiguredWebServer.PublicIp}
    Description: Misconfigured Instance