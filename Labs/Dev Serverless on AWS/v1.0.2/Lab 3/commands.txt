# Step 6 Download Application Code and Run the STartup Script
wget https://us-west-2-tcprod.s3-us-west-2.amazonaws.com/courses/ILT-TF-200-SVDVSS/v1.0.2/lab-3-Step-Functions/scripts/app-code.zip
unzip app-code.zip
cd app-code
chmod +x startupscript.sh
./startupscript.sh

#Step 61, Creating Lambda 
const AWS = require('aws-sdk');
const docClient = new AWS.DynamoDB.DocumentClient();
const dynamodb = new AWS.DynamoDB();

exports.handler = async message => {
   console.log(message);
   let bookmark = message;
   const bookmarkDetails = JSON.stringify(bookmark);
   console.log("bookmarkDetails are "+bookmarkDetails);
   const bookmarkItem = JSON.parse(bookmarkDetails);
   console.log("bookmarkItem "+bookmarkItem);
   console.log("url is "+bookmarkItem.detail.payload.bookmarkUrl.S);
   var exists = false;
   try{
       if(message != null) 
        {
            var params = {
              TableName: process.env.TABLE_NAME,
              IndexName: process.env.INDEX_NAME,
              KeyConditionExpression: "bookmarkUrl = :keyurl",
              ExpressionAttributeValues: {
               ":keyurl": {"S": bookmarkItem.detail.payload.bookmarkUrl.S}
              }
            };
           console.log("exists "+exists);
           var result = await dynamodb.query(params).promise();
           console.log("result is "+JSON.stringify(result.Items));
           var data = JSON.parse(JSON.stringify(result.Items));

            data.forEach(function(item) {
                console.log("db username", item.username.S+" "+bookmarkItem.detail.payload.username.S);
                if (item.username.S != bookmarkItem.detail.payload.username.S)
                    exists = true;
                });

            console.log(exists);
            if (exists === true)
            {
              console.log("in here");    
              var updateParams = {
              TableName: process.env.TABLE_NAME,
              Key:{
                  "id": bookmarkItem.detail.payload.id.S
              },
              UpdateExpression: "set contest=:c",
              ExpressionAttributeValues:{
                  ":c": "duplicate"
              },
              ReturnValues:"UPDATED_NEW"
            };
            await docClient.update(updateParams, function(err, data) {
              if (err) {
                console.log("Unable to update item. Error JSON:", JSON.stringify(err, null, 2));
              }
              else {
                console.log("UpdateItem succeeded:", JSON.stringify(data, null, 2));
              }
            }).promise();
            return "Duplicate";
            }
        }
    }

   catch(e){
     console.log(e);
   }
    return "NotDuplicate";
};

# Step 66, Retrieve bookmark table name
aws dynamodb list-tables

# Step 73, Step Function Definition
{
  "Comment": "Publish Rule workflow",
  "StartAt": "CheckDuplicates",
  "States": {
    "CheckDuplicates": {
      "Type": "Task",
      "Resource": "(duplicateBookmarkCheckArn)",
      "InputPath":"$",
      "ResultPath":"$.extractedMetadata",
      "Catch": [
          {
            "ErrorEquals": [ "States.ALL" ],
            "Next": "NotifyUser"
           }
         ],
      "Next": "DuplicateChoiceState"
    },
    "DuplicateChoiceState": {
        "Type": "Choice",
        "Choices": [
          {
            "Variable": "$.extractedMetadata",
            "StringEquals": "NotDuplicate",
            "Next": "NotDuplicate"
          },
          {
            "Variable": "$.extractedMetadata",
            "StringEquals": "Duplicate",
            "Next": "Duplicate"
          }
        ]
      },
    "NotDuplicate": {
      "Type": "Pass",
      "Next": "ValidateURL"
    },
    "Duplicate": {
      "Type": "Pass",
      "Next": "NotifyUser"
    },
    "ValidateURL":{
      "Type": "Task",
      "Resource": "(validateURLArn)",
      "InputPath":"$",
      "ResultPath":"$.extractedMetadata",
      "Catch": [
          {
            "ErrorEquals": [ "States.ALL" ],
            "Next": "NotifyUser"
           }
         ],
      "Next": "ValidateChoiceState"
      },
    "ValidateChoiceState": {
        "Type": "Choice",
        "Choices": [
          {
            "Variable": "$.extractedMetadata",
            "StringEquals": "Valid",
            "Next": "UserApprovalEmail"
          },
          {
            "Variable": "$.extractedMetadata",
            "StringEquals": "Invalid",
            "Next": "NotifyUser"
          }
        ]
      },
    "UserApprovalEmail": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
      "InputPath":"$",
      "ResultPath":"$.extractedMetadata",
      "Parameters": {
        "FunctionName": "(userApprovalEmailArn)",
        "Payload": {
          "ExecutionContext.$": "$$",
          "APIGatewayEndpoint": "(APIGatewayEndpointURL)"
        }
      },
      "Next": "ManualApprovalChoiceState"
        },
      "ManualApprovalChoiceState": {
        "Type": "Choice",
        "Choices": [
          {
            "Variable": "$.extractedMetadata.Status",
            "StringEquals": "Approved",
            "Next": "PublishApproval"
          },
          {
            "Variable": "$.extractedMetadata.Status",
            "StringEquals": "Rejected",
            "Next": "NotifyUser"
          }
        ]
      },
   "PublishApproval":{
    "Type": "Task",
    "Resource": "(publishApprovalArn)",
    "InputPath": "$",
    "ResultPath": "$.extractedMetadata",
    "End": true
    },
    "NotifyUser": {
        "Type": "Task",
         "Resource": "arn:aws:states:::sns:publish",
         "InputPath": "$",
         "Parameters": {
           "TopicArn": "(ContestTopicArn)",
           "Message.$": "$",
           "MessageAttributes": {
             "msg": {
               "DataType": "String",
               "StringValue": "additional instructions!"
             }
           }
         },
         "End": true
        }
   }
}

# Step 89, EventBridge Event Pattern
  {
    "detail-type": [
      "Shared Bookmarks"
    ],
    "source": [
      "DynamoDB Streams"
    ],
    "detail": {
      "shared": [
        true
      ],
      "contest": [
        "Entered"
      ]
    }
  }

@ Step









##################### Working Lab Notes

ContestTopic ARN
arn:aws:sns:us-west-2:527374442303:ContestTopic

https://u30vgghf7d.execute-api.us-west-2.amazonaws.com/dev/bookmarks/approval

