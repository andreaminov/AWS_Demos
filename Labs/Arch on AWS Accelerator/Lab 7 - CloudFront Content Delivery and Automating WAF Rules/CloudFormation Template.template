Description: 'Lab 7: WAF '
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the test instance
    Type: String
  LinuxAmiId:
    Description: The name of the Windows AMI to find based on search
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: /aws/service/ami-amazon-linux-latest/amzn-ami-hvm-x86_64-gp2
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: lab-vpc
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: lab-igw
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select 
        - '0'
        - !GetAZs ''
      CidrBlock: 10.1.0.0/24
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: lab-subnet-public
  ExternalRoutingTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public RouteTable
  DefaultRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref ExternalRoutingTable
  ExternalNetworkRouteAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref ExternalRoutingTable
      SubnetId: !Ref PublicSubnet
  WebServerSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: WebServerSG
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: WebServerSG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
  RootRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM'
      Policies:
        - PolicyName: web-admin
          PolicyDocument:
            Statement:
              - Action:
                  - 'waf:ListIPSets'
                  - 'waf:UpdateIPSet'
                  - 'waf:GetChangeToken'
                  - 'ec2:DescribeSecurityGroups'
                  - 'ec2:CreateSecurityGroup'
                  - 'ec2:AuthorizeSecurityGroupIngress'
                  - 'ec2:RevokeSecurityGroupIngress'
                  - 'ec2:CreateSecurityGroup'
                  - 'ec2:DescribeInstances'
                  - 'ec2:ModifyInstanceAttribute'
                  - 'ssm:*'
                Resource:
                  - '*'
                Effect: Allow
  RootInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref RootRole
  WebInstance:
    Type: 'AWS::EC2::Instance'
    DependsOn: AttachGateway
    CreationPolicy:
      ResourceSignal:
        Count: '1'
        Timeout: PT25M
    Properties:
      ImageId: !Ref LinuxAmiId
      Tags:
        - Key: Name
          Value: WebServer
      InstanceType: t2.medium
      KeyName: !Ref KeyName
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref WebServerSG
      IamInstanceProfile: !Ref RootInstanceProfile
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash -ex
            yum -y update
            yum -y install httpd php
            # update apache config to log X-Forwarded-For
            echo 'LogFormat "%h (%{X-Forwarded-For}i) %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\"" combined' >> /etc/httpd/conf/httpd.conf
            chkconfig httpd on
            cd /var/www/html
            wget https://${AWS::Region}-tcprod.s3.amazonaws.com/courses/ILT-TF-300-ACARCH/v1.0.0/lab-7-security/scripts/waf-app.zip
            unzip waf-app.zip
            service httpd start
            pip install tabulate boto3
            su ec2-user <<'EOF'
            mkdir  /home/ec2-user/.aws
            echo '[default]' > /home/ec2-user/.aws/config
            echo 'region = ${AWS::Region}' >> /home/ec2-user/.aws/config
            cd /home/ec2-user
            wget https://${AWS::Region}-tcprod.s3.amazonaws.com/courses/ILT-TF-300-ACARCH/v1.0.0/lab-7-security/scripts/waf_ip_update.py
            wget https://${AWS::Region}-tcprod.s3.amazonaws.com/courses/ILT-TF-300-ACARCH/v1.0.0/lab-7-security/scripts/cloudfront_sgs.py
            EOF
            /opt/aws/bin/cfn-signal --stack ${AWS::StackName} --resource WebInstance --region ${AWS::Region}

  EIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      InstanceId: !Ref WebInstance
  CloudFrontDistribution:
    Type: 'AWS::CloudFront::Distribution'
    DependsOn: EIP
    Properties:
      DistributionConfig:
        DefaultCacheBehavior:
          DefaultTTL: 0
          ForwardedValues:
            Headers:
              - '*'
            QueryString: true
          TargetOriginId: EC2-PHP-site
          ViewerProtocolPolicy: allow-all
        Enabled: true
        Origins:
          - CustomOriginConfig:
              OriginProtocolPolicy: http-only
            DomainName: !GetAtt 
              - WebInstance
              - PublicDnsName
            Id: EC2-PHP-site
Outputs:
  EC2PublicIP:
    Value: !Ref EIP
  Region:
    Description: Region of the lab
    Value: !Ref 'AWS::Region'
  WebsiteURL:
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt 
          - WebInstance
          - PublicDnsName
  CloudFrontURL:
    Value: !Join 
      - ''
      - - 'https://'
        - !GetAtt 
          - CloudFrontDistribution
          - DomainName